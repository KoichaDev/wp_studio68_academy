{"version":3,"sources":["chart.js"],"names":["ChartJs","element","number","counter","count","countUp","innerHTML","window","requestAnimationFrame","complete","incomplete","data","Chart","ctx","type","labels","datasets","backgroundColor","borderColor","borderWidth","options","responsive","maintainAspectRatio","cutoutPercentage","legend","display","scales","xAxes","gridLines","ticks","beginAtZero","yAxes","pluginService","register","beforeDraw","chart","width","height","restore","fontSize","toFixed","font","textBaseline","fillStyle","text","textX","Math","round","measureText","textY","fillText","save","document","getElementById","getContext","inComplete","querySelector","event","chartDoughnut","counterUp"],"mappings":";;;;;;;;;;;;;;;IAAqBA;AACjB,qBAAc;AAAA;;AAAA;;AAAA,uCAeF,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC7B,UAAMC,OAAO,GAAGF,OAAhB;AACA,UAAIG,KAAK,GAAG,CAAZ;;AAEA,UAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AAClB;AACAD,QAAAA,KAAK,GAFa,CAIlB;;AACAD,QAAAA,OAAO,CAACG,SAAR,aAAuBF,KAAvB,OALkB,CAOlB;;AACA,YAAIA,KAAK,GAAGF,MAAZ,EAAoB;AAChBK,UAAAA,MAAM,CAACC,qBAAP,CAA6BH,OAA7B;AACH;AACJ,OAXD,CAJ6B,CAiB7B;;;AACAE,MAAAA,MAAM,CAACC,qBAAP,CAA6BH,OAA7B;AACH,KAlCa;;AAAA,2CAqCE,UAACI,QAAD,EAAWC,UAAX,EAA0B;AACtC,UAAMC,IAAI,GAAG,CAACF,QAAD,EAAWC,UAAX,CAAb,CADsC,CACD;;AACrC,UAAIE,KAAJ,CAAU,KAAI,CAACC,GAAf,EAAoB;AAChBC,QAAAA,IAAI,EAAE,UADU;AAEhBH,QAAAA,IAAI,EAAE;AACFI,UAAAA,MAAM,EAAE,CAAC,YAAD,EAAe,UAAf,CADN;AAEFC,UAAAA,QAAQ,EAAE,CAAC;AACPL,YAAAA,IAAI,EAAEA,IADC;AAEPM,YAAAA,eAAe,EAAE,CACb,uBADa,EAEb,uBAFa,CAFV;AAOPC,YAAAA,WAAW,EAAE,CACT,uBADS,EAET,uBAFS,CAPN;AAWPC,YAAAA,WAAW,EAAE;AAXN,WAAD;AAFR,SAFU;AAmBhBC,QAAAA,OAAO,EAAE;AACLC,UAAAA,UAAU,EAAE,KADP;AAELC,UAAAA,mBAAmB,EAAE,KAFhB;AAGLC,UAAAA,gBAAgB,EAAE,EAHb;AAGiB;AACtBC,UAAAA,MAAM,EAAE;AACJC,YAAAA,OAAO,EAAE;AADL,WAJH;AAOLC,UAAAA,MAAM,EAAE;AACJC,YAAAA,KAAK,EAAE,CAAC;AACJC,cAAAA,SAAS,EAAE;AACPH,gBAAAA,OAAO,EAAE;AADF,eADP;AAIJI,cAAAA,KAAK,EAAE;AACHJ,gBAAAA,OAAO,EAAE,KADN;AAEHK,gBAAAA,WAAW,EAAE;AAFV;AAJH,aAAD,CADH;AAUJC,YAAAA,KAAK,EAAE,CAAC;AACJH,cAAAA,SAAS,EAAE;AACPH,gBAAAA,OAAO,EAAE;AADF,eADP;AAIJI,cAAAA,KAAK,EAAE;AACHJ,gBAAAA,OAAO,EAAE,KADN;AAEHK,gBAAAA,WAAW,EAAE;AAFV;AAJH,aAAD;AAVH;AAPH;AAnBO,OAApB;AAgDAlB,MAAAA,KAAK,CAACoB,aAAN,CAAoBC,QAApB,CAA6B;AACzBC,QAAAA,UAAU,EAAE,oBAACC,KAAD,EAAW;AACnB,cAAMC,KAAK,GAAGD,KAAK,CAACA,KAAN,CAAYC,KAA1B;AAAA,cACIC,MAAM,GAAGF,KAAK,CAACA,KAAN,CAAYE,MADzB;AAAA,cAEIxB,GAAG,GAAGsB,KAAK,CAACA,KAAN,CAAYtB,GAFtB;AAIAA,UAAAA,GAAG,CAACyB,OAAJ;AACA,cAAMC,QAAQ,GAAG,CAACF,MAAM,GAAG,EAAV,EAAcG,OAAd,CAAsB,CAAtB,CAAjB;AACA3B,UAAAA,GAAG,CAAC4B,IAAJ,GAAWF,QAAQ,GAAG,eAAtB;AACA1B,UAAAA,GAAG,CAAC6B,YAAJ,GAAmB,QAAnB;AACA7B,UAAAA,GAAG,CAAC8B,SAAJ,GAAgB,SAAhB;AAEA,cAAMC,IAAI,GAAGjC,IAAI,CAAC,CAAD,CAAJ,GAAU,GAAvB;AAAA,cACIkC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACX,KAAK,GAAGvB,GAAG,CAACmC,WAAJ,CAAgBJ,IAAhB,EAAsBR,KAA/B,IAAwC,CAAxC,GAA4C,EAAvD,CADZ;AAAA,cAEIa,KAAK,GAAGZ,MAAM,GAAG,CAFrB;AAIAxB,UAAAA,GAAG,CAACqC,QAAJ,CAAaN,IAAb,EAAmBC,KAAnB,EAA0BI,KAA1B;AACApC,UAAAA,GAAG,CAACsC,IAAJ;AACH;AAlBwB,OAA7B;AAoBH,KA3Ga;;AACV,SAAKtC,GAAL,GAAWuC,QAAQ,CAACC,cAAT,CAAwB,kBAAxB,EAA4CC,UAA5C,CAAuD,IAAvD,CAAX;AACA,SAAKC,UAAL,GAAkBH,QAAQ,CAACI,aAAT,CAAuB,mBAAvB,CAAlB;AACA,SAAK/C,QAAL,GAAgB2C,QAAQ,CAACI,aAAT,CAAuB,iBAAvB,CAAhB;AAEA,SAAKC,KAAL;AACH,IAED;;;;;4BACQ;AACJ,WAAKC,aAAL,CAAmB,EAAnB,EAAuB,EAAvB;AACA,WAAKC,SAAL,CAAe,KAAKJ,UAApB,EAAgC,EAAhC;AACA,WAAKI,SAAL,CAAe,KAAKlD,QAApB,EAA8B,EAA9B;AACH","file":"chart.js","sourceRoot":"..\\assets\\js","sourcesContent":["export default class ChartJs {\r\n    constructor() {\r\n        this.ctx = document.getElementById('s68-course-chart').getContext('2d');\r\n        this.inComplete = document.querySelector('[data-incomplete]');\r\n        this.complete = document.querySelector('[data-complete]');\r\n\r\n        this.event();\r\n    }\r\n\r\n    // Event Listener \r\n    event() {\r\n        this.chartDoughnut(60, 40);\r\n        this.counterUp(this.inComplete, 60);\r\n        this.counterUp(this.complete, 40);\r\n    }\r\n\r\n    counterUp = (element, number) => {\r\n        const counter = element\r\n        let count = 0;\r\n\r\n        const countUp = () => {\r\n            // Increase count by 1\r\n            count++;\r\n\r\n            // Update the UI\r\n            counter.innerHTML = `${count}%`;\r\n\r\n            // if the count is less than 500, run it again\r\n            if (count < number) {\r\n                window.requestAnimationFrame(countUp);\r\n            }\r\n        };\r\n\r\n        // Start the animation\r\n        window.requestAnimationFrame(countUp);\r\n    }\r\n\r\n    // Triggering the Event Listener\r\n    chartDoughnut = (complete, incomplete) => {\r\n        const data = [complete, incomplete]; // Dummy data! We will use this data for getting real progress data later\r\n        new Chart(this.ctx, {\r\n            type: 'doughnut',\r\n            data: {\r\n                labels: ['Incomplete', 'Complete'],\r\n                datasets: [{\r\n                    data: data,\r\n                    backgroundColor: [\r\n                        'rgba(204, 71, 115, 1)',\r\n                        'rgba(71, 204, 160, 1)',\r\n\r\n                    ],\r\n                    borderColor: [\r\n                        'rgba(204, 71, 115, 1)',\r\n                        'rgba(71, 204, 160, 1)',\r\n                    ],\r\n                    borderWidth: 1\r\n                }]\r\n            },\r\n\r\n            options: {\r\n                responsive: false,\r\n                maintainAspectRatio: false,\r\n                cutoutPercentage: 80, // Change the doughnut Graph size\r\n                legend: {\r\n                    display: false,\r\n                },\r\n                scales: {\r\n                    xAxes: [{\r\n                        gridLines: {\r\n                            display: false,\r\n                        },\r\n                        ticks: {\r\n                            display: false,\r\n                            beginAtZero: true\r\n                        }\r\n                    }],\r\n                    yAxes: [{\r\n                        gridLines: {\r\n                            display: false,\r\n                        },\r\n                        ticks: {\r\n                            display: false,\r\n                            beginAtZero: true\r\n                        }\r\n                    }]\r\n                }\r\n            }\r\n        });\r\n        Chart.pluginService.register({\r\n            beforeDraw: (chart) => {\r\n                const width = chart.chart.width,\r\n                    height = chart.chart.height,\r\n                    ctx = chart.chart.ctx;\r\n\r\n                ctx.restore();\r\n                const fontSize = (height / 80).toFixed(2);\r\n                ctx.font = fontSize + \"em sans-serif\";\r\n                ctx.textBaseline = \"middle\";\r\n                ctx.fillStyle = \"#EED9CA\";\r\n\r\n                const text = data[0] + \"%\",\r\n                    textX = Math.round((width - ctx.measureText(text).width) / 2 + 12),\r\n                    textY = height / 2;\r\n\r\n                ctx.fillText(text, textX, textY);\r\n                ctx.save();\r\n            }\r\n        });\r\n    }\r\n}\r\n"]}